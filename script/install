#!/bin/bash
#
# Run package installation and all topic installers.

set -e

# handle options
SHORT=vq
LONG=verbose,quiet

# -temporarily store output to be able to check for errors
# -activate advanced mode getopt quoting e.g. via “--options”
# -pass arguments only via   -- "$@"   to separate them correctly
PARSED=$(getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
  # e.g. $? == 1
  #  then getopt has complained about wrong arguments to stdout
  exit 2
fi
# use eval with "$PARSED" to properly handle the quoting
eval set -- "$PARSED"

# now enjoy the options in order and nicely split until we see --
while true; do
  case "$1" in
    -v|--verbose)
      export VERBOSE=1
      shift
      ;;
    -q|quiet)
      export QUIET=1
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Should print usage here"
      exit 3
      ;;
  esac
done

# verbose trumps quiet
if [ "$VERBOSE" = "1" ];then
  (>&2 echo 'WARN: --verbose(-v) overrides --quiet(-q)')
  unset QUIET
fi

if [ -z ${DOTFILES+x} ];then
  export DOTFILES=~/dot.minatrix
fi

source $DOTFILES/script/helpers

ensure-sudo

cd "$(dirname $0)"/..

shopt -s extglob

# load default packages
source packages.bash

# Don't install ppas when updating
if [ -z ${DOTUPDATE+x} ];then
  for ppa in "${ppalist[@]}"; do
    inf "Adding custom package source: $ppa"
    eval add-apt-repository $ppa -y $SILENCE_ALL
    success "Added source:$ppa"
  done
fi

inf 'updating package info'
eval apt-get update $SILENCE_ALL
success 'packages updated'

inf 'Installing core packages'
eval apt install ${packagelist[@]} $SILENCE_ALL
success 'installed core packages'

# find the installers and run them iteratively
export AFTERINSTALL='./AFTER_INSTALL_MESSAGE'

for file in ./!(script)/install; do
  if [ -f "$file" ] && [ -x "$file" ];then
    inf "installing $file"
    $file

    if [ $? = 0 ];then
      if ! [ "$QUIET" = "1" ];then
        success "installed $file"
      fi
    else
      fail "Error installing $file"
    fi
  fi
done

# Don't bootstrap when updating
if [ -z ${DOTUPDATE+x} ];then
  inf 'bootstrapping dot files'
  $DOTFILES/script/bootstrap

  if [ $? = 0 ];then
    if ! [ "$QUIET" = "1" ];then
      success 'bootstrap complete'
    fi
  else
    fail 'Error bootstrapping'
  fi
fi

# source the new bash configuration
source ~/.bashrc

if [ -z ${DOTUPDATE+x} ];then
  tada "dot.minatrix installed successfully!"

  if ! [ "$QUIET" = "1" ];then
    echo ''
    echo "$(<$AFTERINSTALL)"
  fi
else
  tada "dot.minatrix updated successfully!"
fi

rm $AFTERINSTALL
unset AFTERINSTALL VERBOSE QUIET
