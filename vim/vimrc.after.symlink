color railscasts

" Maps tab helpers prefixed with `t`
nnoremap th :tabfirst<CR>
nnoremap tk :tabprev<CR>
nnoremap tj :tabnext<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>
nnoremap td :tabclose<CR>
nnoremap tx :tabclose<CR>

" Configure splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Filetype detection
au BufRead,BufNewFile *.bash setfiletype sh

set splitbelow
set splitright

" Configure Dispatch shortcuts
nnoremap <leader>sp :w<cr> :Dispatch rspec %<cr>
nnoremap <leader>sa :Dispatch rspec --fail-fast<cr>
nnoremap <leader>sl :w<cr> :Dispatch rspec %\:<C-r>=line('.')<cr><cr>
nnoremap <leader>co :Copen<cr>
nnoremap <leader>d  :Dispatch
nnoremap <leader>b  :Dispatch!

" codeclimate stuff
nnoremap <leader>aa :CodeClimateAnalyzeProject<cr>

" Quick iteration of vim config
nnoremap <leader>vr :vsp $MYVIMRC.after<cr>
nnoremap <leader>so :source $MYVIMRC<cr>

" Ruby
nnoremap <leader>ir :Dispatch irb<cr>

" Rails interactions
nnoremap <leader>rc :Dispatch bundle exec rails console<cr>
nnoremap <leader>rs :Rserver<cr>
nnoremap <leader>mig :Dispatch! bundle exec rails db:environment:set db:migrate db:test:prepare<cr>
nnoremap <leader>rr :Dispatch! bundle exec rails restart<cr>

" Git interactions
nnoremap <leader>gst :Gstatus<cr>
nnoremap <leader>gco :Gcommit<cr>
nnoremap <leader>gpu :Dispatch! git-promote<cr>
nnoremap <leader>gpp :Dispatch! git-promote -f<cr>
nnoremap <leader>gpr :Dispatch git-pr<cr>
nnoremap <leader>gbr :Dispatch git branch<cr>
nnoremap <leader>gdi :Git diff<cr>
nmap <leader>gl :! glog<cr>
nmap <leader>gdi :! git diff --color<cr>
nmap <leader>gdl :! dlog<cr>

" Projectionist stuff
nnoremap <leader>aa :A<cr>

" NERDTree show hidden files (`.`)
let NERDTreeShowHidden=1

" increase nerd tree window size
let NERDTreeWinSize=40

" Fixe my fat fingers
map <F1> <Esc>

set foldmethod=syntax
set foldnestmax=5
set foldminlines=2
set nofoldenable

set modelines=2
set modeline

let s:hidden_all = 0
function! ToggleHiddenAll()
  if s:hidden_all  == 0
    let s:hidden_all = 1
    set noshowmode
    set noruler
    set laststatus=0
    set noshowcmd
  else
    let s:hidden_all = 0
    set showmode
    set ruler
    set laststatus=2
    set showcmd
  endif
endfunction

nnoremap <S-h> :call ToggleHiddenAll()<CR>

let g:markdown_fenced_languages = ['html', 'vim', 'ruby', 'bash=sh', 'css', 'diff', 'git', 'haml', 'javascript', 'less', 'sass', 'sql', 'tmux']

hi StatusLine ctermbg=238 ctermfg=68
hi StatusLineNC ctermbg=238 ctermfg=68

if has("statusline") && !&cp
  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=

  " Put git head, filename, modify flags at left
  set statusline+=%f\ %m\ %r

  " Right-align
  set statusline+=%=

  " Buffer num, in-file location
  set statusline+=%{fugitive#head()}\ \ \ \ \ #%n\ [\ %3l/%3L\ %3v]
endif

" Spell check config
set spellfile=~/.spell/en.utf-8.add
autocmd Filetype markdown setlocal spell
autocmd Filetype gitcommit setlocal spell

nmap ; :
vmap ; :
