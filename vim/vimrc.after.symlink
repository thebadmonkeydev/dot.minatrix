colorscheme badmonkey
" Maps tab helpers prefixed with `t`
nnoremap th :tabfirst<CR>
nnoremap tk :tabprev<CR>
nnoremap tj :tabnext<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>
nnoremap td :tabclose<CR>
nnoremap tx :tabclose<CR>

" Configure splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" NERDTree setup
nnoremap <leader>n :NERDTreeToggle<CR>:NERDTreeMirror<CR>

" Filetype detection
au BufRead,BufNewFile *.bash setfiletype sh

set splitbelow
set splitright

" Configure Dispatch shortcuts
nnoremap <leader>sp :w<cr> :term time bin/rspec %<cr>
"nnoremap <leader>sp :w<cr> :Dispatch! urxvt --hold -e bash -c "time bundle exec rspec %"<cr>
"nnoremap <leader>sa :Dispatch! urxvt --hold -e bash -c "time bundle exec rspec --fail-fast"<cr>
nnoremap <leader>sa :term bin/rspec<cr>
nnoremap <leader>sl :w<cr> :term bin/rspec %\:<C-r>=line('.')<cr><cr>
"nnoremap <leader>sl :w<cr> :Dispatch! urxvt --hold -e bash -c "time bundle exec rspec %\:<C-r>=line('.')<cr>"<cr>
nnoremap <leader>co :Copen<cr>
nnoremap <leader>d  :Dispatch
nnoremap <leader>b  :Dispatch!
nnoremap gl gF

" codeclimate stuff
nnoremap <leader>aa :CodeClimateAnalyzeProject<cr>

" Quick iteration of vim config
nnoremap <leader>vr :vsp $MYVIMRC.after<cr>
nnoremap <leader>so :source $MYVIMRC<cr>

" Ruby
nnoremap <leader>ir :Dispatch irb<cr>

" Rails interactions
"nnoremap <leader>rc :Dispatch bundle exec rails console<cr>
nnoremap <leader>rc :Dispatch! urxvt -e bash -c "bundle exec rails console"<cr>
nnoremap <leader>rs :Dispatch! urxvt -e bash -c "bundle exec rails s"<cr>
nnoremap <leader>rf :Dispatch! urxvt -e bash -c "bundle exec foreman s -f Procfile.dev.nossr"<cr>
nnoremap <leader>mig :Dispatch! bundle exec rails db:migrate<cr>
nnoremap <leader>rr :Dispatch! bundle exec rails restart<cr>

" Git interactions
nnoremap <leader>gst :Gstatus<cr>
nnoremap <leader>gco :Gcommit<cr>
nnoremap <leader>gpu :Dispatch! git-promote<cr>
nnoremap <leader>gpp :Dispatch! git-promote -f<cr>
nnoremap <leader>gpr :Dispatch git-pr<cr>
nnoremap <leader>gbr :Dispatch git branch<cr>
nnoremap <leader>gdi :Git diff<cr>
nmap <leader>gl :! glog<cr>
nmap <leader>gdi :! git diff --color<cr>
nmap <leader>gdl :! dlog<cr>

" Projectionist stuff
nnoremap <leader>aa :A<cr>

" NERDTree show hidden files (`.`)
let NERDTreeShowHidden=1

" increase nerd tree window size
let NERDTreeWinSize=40

" Fixe my fat fingers
map <F1> <Esc>

set nofoldenable

set modelines=2
set modeline

let s:hidden_all = 0
function! ToggleHiddenAll()
  if s:hidden_all  == 0
    let s:hidden_all = 1
    set noshowmode
    set noruler
    set laststatus=0
    set noshowcmd
  else
    let s:hidden_all = 0
    set showmode
    set ruler
    set laststatus=2
    set showcmd
  endif
endfunction

nnoremap <S-h> :call ToggleHiddenAll()<CR>

let g:markdown_fenced_languages = ['html', 'vim', 'ruby', 'bash=sh', 'css', 'diff', 'git', 'haml', 'javascript', 'less', 'sass', 'sql', 'tmux']

hi Normal ctermbg=none
hi StatusLine ctermbg=none ctermfg=8 cterm=underline
hi StatusLineNC ctermbg=none ctermfg=8 cterm=none
hi FileNameStatus ctermbg=none ctermfg=8 cterm=underline
hi VertSplit ctermbg=none ctermfg=8 cterm=none
hi GitBranch ctermbg=none ctermfg=4 cterm=none
hi GitBranchBracket ctermbg=none ctermfg=20 cterm=none
hi LineNR ctermbg=none ctermfg=8 cterm=none
hi EndOfBuffer ctermbg=none ctermfg=8
"hi Cursor ctermbg=8 ctermfg=none
"hi iCursor ctermbg=8 ctermfg=none
"hi Comment term=bold ctermfg=137 guifg=#af875f
"hi TabLine term=underline cterm=underline ctermfg=15 ctermbg=8 gui=underline guibg=DarkGrey

"hi rubySymbol ctermbg=none ctermfg=5
"hi rubyConstant ctermbg=none ctermfg=4
"hi rubyClassName ctermbg=none ctermfg=3
"hi CursorLineNR ctermbg=96 ctermfg=8
"hi CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

if has("statusline") && !&cp
  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=

  " left
  set statusline+=%<\                                              " truncate at start
  set statusline+=%#FileNameStatus#\ %.64f\ %m\ %r                 " Put git head, filename, modify flags at left

  set statusline+=%=

  " Right
  set statusline+=%#GitBranchBracket#%#GitBranchBracket#          " Open bracket for git branch in status
  set statusline+=%#GitBranch#%.64{fugitive#head()}               " Git head
  set statusline+=%#GitBranchBracket#%#GitBranchBracket#          " Closing bracket for git branch in status
  " Buffer num, in-file location
  set statusline+=%#StatusLine#\ [%4l/%4L]
endif

" Spell check config
set spellfile=~/.spell/en.utf-8.add
autocmd Filetype markdown  setlocal spell
autocmd Filetype gitcommit setlocal spell
autocmd Filetype markdown  setlocal textwidth=0 wrapmargin=0

" Lorem Ipsum generation
nmap <leader>L :read ~/dot.minatrix/vim/templates/lorem_ipsum.txt<CR>

imap jj <Esc>
imap <F1> <Esc>
nmap ; :
vmap ; :

" ctag + ctlp
nnoremap <leader>. :CtrlPTag<cr>
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Snippet manager
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="horizontal"
nmap <leader>ue :UltiSnipsEdit <CR>
nmap <leader>uE :UltiSnipsEdit! <CR>
let g:UltiSnipsSnippetsDir="~/.vim/bundle/custom-snippets/UltiSnips"

let g:limelight_paragraph_span = 1
let g:limelight_conceal_ctermfg = 'black'
let g:vim_markdown_toc_autofit = 1
